{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","console","log","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAAqB,EACXC,mBAAS,IADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAgB/C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAOb,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCLlBG,EAAc,SAAC,GAAwB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEtC,OACI,yBAAKC,UAAU,4DACb,yBAAKC,IAAKF,EAAKG,IAAMJ,IACrB,2BAAKA,K,uBCPFK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,gDACkCO,UAAUF,GAD5C,sDAEnBG,QAAQC,IAAIT,GAFO,SAGAU,MAAMV,GAHN,cAGbW,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAXvB,kBAeZc,GAfY,4CAAH,sDCKPK,EAAU,SAAC,GAAiB,IAAfd,EAAc,EAAdA,SAAc,ECHZ,SAAEA,GAAe,IAAD,EAEdrB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPnB,EAAQC,GAAUmB,MAAM,SAAAC,GAEpBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAIlB,CAACf,IAEGgB,EDZ2BK,CAAarB,GAAjCY,EAJsB,EAI5BJ,KAAcO,EAJc,EAIdA,QAEtB,OACI,oCACI,4BAAKf,GACHe,GAAW,sCACb,yBAAKnB,UAAU,aAETgB,EAAOF,KAAK,SAACC,GAAD,OACV,kBAAC,EAAD,eACAW,IAAKX,EAAIlB,IACJkB,UEhBZY,EAAe,WAAM,MAIM5C,mBAAS,CAAC,iBAJhB,mBAIvBQ,EAJuB,KAIXT,EAJW,KAW9B,OACI,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQS,EAAWuB,KAAK,SAAAV,GAAQ,OACpB,kBAAC,EAAD,CACAsB,IAAKtB,EACLA,SAAUA,U,MCpBlCwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.297d8c99.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories } ) => {\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2) {\n           setCategories(categories => [inputValue, ...categories ] )\n           setInputValue('')\n        }\n       \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-2s\">\n          <img src={url} alt={ title} />\n          <p>{ title }</p>\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=NmuE8bU1sOPoW2hj2giztuKWpMZfBfOK`;\n    console.log(url)\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    \n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ( {category}) => {\n    \n//    const [images, setImages] = useState([])\n\n    const { data: images, loading } = useFetchGifs(category);   \n\n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p>Loading</p> }\n            <div className=\"card-grid\">\n            \n                { images.map( (img) => ( \n                    <GifGridItem \n                    key={img.id} \n                    { ...img }\n                    />\n                ))}\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n\n        getGifs(category).then( imgs => {\n\n            setState({\n                data: imgs,\n                loading: false\n            });\n        })\n    \n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Puch', 'Samurai X', 'Dragon Ball']\n    \n    const [categories, setCategories] = useState(['One Puch Man'])\n\n    //const handleAdd = () => {\n        //setCategories([...categories, 'Inuyasha'])\n    //    setCategories(cats => [...cats, 'Inuyasha'])\n    //}\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            \n            <ol>\n                {\n                    categories.map( category => \n                        <GifGrid \n                        key={category}\n                        category={category}\n                        />    \n                    )\n                }\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}